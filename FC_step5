#!/usr/bin/env bash

set -euo pipefail

# =============================================================================
# Script: nuisance_regression.sh
# Description:
#   Performs nuisance regression for a specific subject.
#   Steps include:
#     1. Splitting motion parameters
#     2. Extracting signals (global, CSF, WM)
#     3. Modifying .fsf file based on fsf_type
#     4. Running FEAT model
#     5. Getting residuals and processing
#     6. Resampling residuals to MNI space
# =============================================================================

# ---------------------------- Usage Function --------------------------------

usage() {
    echo "Usage: $0 -s <subj_id> -n <num_threads> -w <working_dir> -a <anat_dir> -t <template_dir> -p <tissuepriors_dir> -r <TR> -e <TE> -v <n_vols> -f <fsf_type> -l <log_file> [-h]" >&2
    echo ""
    echo "Options:"
    echo "  -s    Subject ID (required)"
    echo "  -n    Number of threads (default: 3)"
    echo "  -w    Working directory (required)"
    echo "  -a    Anatomy directory (required)"
    echo "  -t    Template directory (required)"
    echo "  -p    Tissue priors directory (required)"
    echo "  -r    Repetition time TR (required)"
    echo "  -e    Echo time TE (required)"
    echo "  -v    Number of volumes n_vols (required)"
    echo "  -f    fsf_type: NO_GRD or Retain_GRS (required)"
    echo "  -l    Log file path (required)"
    echo "  -h    Display this help message"
    exit 1
}

# ---------------------------- Argument Parsing ------------------------------

# Initialize variables
SUBJ_ID=""
NUM_THREADS=3
WORKING_DIR=""
ANAT_DIR=""
TEMPLATE_DIR=""
TISSUEPRIORS_DIR=""
TR=""
TE=""
N_VOLS=""
FSF_TYPE=""
LOG_FILE=""

while getopts ":s:n:w:a:t:p:r:e:v:f:l:h" opt; do
    case ${opt} in
        s ) SUBJ_ID="$OPTARG" ;;
        n ) NUM_THREADS="$OPTARG" ;;
        w ) WORKING_DIR="$OPTARG" ;;
        a ) ANAT_DIR="$OPTARG" ;;
        t ) TEMPLATE_DIR="$OPTARG" ;;
        p ) TISSUEPRIORS_DIR="$OPTARG" ;;
        r ) TR="$OPTARG" ;;
        e ) TE="$OPTARG" ;;
        v ) N_VOLS="$OPTARG" ;;
        f ) FSF_TYPE="$OPTARG" ;;
        l ) LOG_FILE="$OPTARG" ;;
        h ) usage ;;
        \? ) echo "Invalid Option: -$OPTARG" >&2; usage ;;
        : ) echo "Option -$OPTARG requires an argument." >&2; usage ;;
    esac
done

# ---------------------------- Validation -------------------------------------

if [[ -z "${SUBJ_ID}" || -z "${WORKING_DIR}" || -z "${ANAT_DIR}" || -z "${TEMPLATE_DIR}" || -z "${TISSUEPRIORS_DIR}" || -z "${TR}" || -z "${TE}" || -z "${N_VOLS}" || -z "${FSF_TYPE}" || -z "${LOG_FILE}" ]]; then
    echo "ERROR: Missing required arguments." >&2
    usage
fi

if ! [[ "$NUM_THREADS" =~ ^[1-9][0-9]*$ ]]; then
    echo "ERROR: Number of threads must be a positive integer." >&2
    exit 1
fi

if [[ "$FSF_TYPE" != "NO_GRD" && "$FSF_TYPE" != "Retain_GRS" ]]; then
    echo "ERROR: Invalid fsf_type. Please use NO_GRD or Retain_GRS." >&2
    exit 1
fi

# ---------------------------- Setup ------------------------------------------

export OMP_NUM_THREADS="$NUM_THREADS"

# Redirect all output to log file
exec > >(tee -a "$LOG_FILE") 2>&1

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Preprocessing subject: $SUBJ_ID"

# Define directories
anat_dir="$ANAT_DIR"
func_dir="$WORKING_DIR"
reg_dir="${func_dir}/reg_dir"
segment_dir="${func_dir}/seg"
nuisance_dir="${func_dir}/nuisance"
regstandard_path="$FSLDIR/data/standard/MNI152_T1_2mm_brain.nii.gz"

# Create necessary directories
mkdir -p "$nuisance_dir"

# Check if required files exist
required_files=(
    "${func_dir}/rest_mc.1D"
    "${func_dir}/rest_pp.nii.gz"
    "${segment_dir}/global_mask.nii.gz"
    "${segment_dir}/csf_mask.nii.gz"
    "${segment_dir}/wm_mask.nii.gz"
    # "${TISSUEPRIORS_DIR}/3mm/avg152T1_csf_bin.nii.gz"
    # "${TISSUEPRIORS_DIR}/3mm/avg152T1_white_bin.nii.gz"
    "${TEMPLATE_DIR}/nuisance_N.fsf"
    "${TEMPLATE_DIR}/nuisance_R.fsf"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Required file '$file' does not exist."
        exit 1
    fi
done

# ---------------------------- Splitting Motion Parameters --------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Splitting motion parameters for $SUBJ_ID"

for i in {1..6}; do
    awk -v col=$i '{print $col}' "${func_dir}/rest_mc.1D" > "${nuisance_dir}/mc${i}.1D"
done

# ---------------------------- Extracting Signals -----------------------------

# Extract signal for global, CSF, and WM

## 3. Global
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Extracting global signal for ${SUBJ_ID}"
3dmaskave -mask "${segment_dir}/global_mask.nii.gz" -quiet "${func_dir}/rest_pp.nii.gz" > "${nuisance_dir}/global.1D"

## 4. CSF
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Extracting signal from CSF for ${SUBJ_ID}"
3dmaskave -mask "${segment_dir}/csf_mask.nii.gz" -quiet "${func_dir}/rest_pp.nii.gz" > "${nuisance_dir}/csf.1D"

## 5. WM
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Extracting signal from White Matter for ${SUBJ_ID}"
3dmaskave -mask "${segment_dir}/wm_mask.nii.gz" -quiet "${func_dir}/rest_pp.nii.gz" > "${nuisance_dir}/wm.1D"

# ---------------------------- Creating FSF File ------------------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Modifying FSF file based on fsf_type: ${FSF_TYPE}"

if [ "$FSF_TYPE" == "NO_GRD" ]; then
    # Nuisance without Global signal
    sed -e "s:nuisance_dir:${nuisance_dir}:g" \
        -e "s:nuisance_model_outputdir:${nuisance_dir}/residuals.feat:g" \
        -e "s:nuisance_model_TR:${TR}:g" \
        -e "s:nuisance_model_numTRs:${N_VOLS}:g" \
        -e "s:nuisance_model_input_data:${func_dir}/rest_pp.nii.gz:g" \
        -e "s:nuisance_model_TE:${TE}:g" \
        -e "s:standard_mni_2mm:${regstandard_path}:g" \
        "${TEMPLATE_DIR}/nuisance_N.fsf" > "${nuisance_dir}/nuisance.fsf"
elif [ "$FSF_TYPE" == "Retain_GRS" ]; then 
    # Nuisance with retained Global signal
    sed -e "s:nuisance_output:${nuisance_dir}/residuals.feat:g" \
        -e "s:standard_mni_2mm:${regstandard_path}:g" \
        -e "s:feat_files_1:${nuisance_dir}/rest_pp:g" \
        -e "s:fmri_1:${nuisance_dir}/csf.1D:g" \
        -e "s:fmri_2:${nuisance_dir}/wm.1D:g" \
        -e "s:fmri_3:${nuisance_dir}/mc1.1D:g" \
        -e "s:fmri_4:${nuisance_dir}/mc2.1D:g" \
        -e "s:fmri_5:${nuisance_dir}/mc3.1D:g" \
        -e "s:fmri_6:${nuisance_dir}/mc4.1D:g" \
        -e "s:fmri_7:${nuisance_dir}/mc5.1D:g" \
        -e "s:nuisance_model_TR:${TR}:g" \
        -e "s:nuisance_model_numTRs:${N_VOLS}:g" \
        -e "s:nuisance_model_TE:${TE}:g" \
        -e "s:fmri_8:${nuisance_dir}/mc6.1D:g" \
        "${TEMPLATE_DIR}/nuisance_R.fsf" > "${nuisance_dir}/nuisance.fsf"
fi

# ---------------------------- Running FEAT Model ------------------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Running FEAT model for nuisance regression."
feat_model "${nuisance_dir}/nuisance"

# ---------------------------- Getting Residuals ------------------------------

minVal=$(3dBrickStat -min -mask "${func_dir}/rest_pp_mask.nii.gz" "${func_dir}/rest_pp.nii.gz")

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Running FILM to get residuals."
film_gls --rn=${nuisance_dir}/stats --noest --sa --ms=5 --in=${func_dir}/rest_pp.nii.gz --pd=${nuisance_dir}/nuisance.mat --thr=${minVal}

# ---------------------------- Demeaning Residuals ----------------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Demeaning residuals and adding 100."
3dTstat -mean -prefix ${nuisance_dir}/stats/res4d_mean.nii.gz ${nuisance_dir}/stats/res4d.nii.gz
3dcalc -a ${nuisance_dir}/stats/res4d.nii.gz -b ${nuisance_dir}/stats/res4d_mean.nii.gz -expr '(a-b)+100' -prefix ${func_dir}/rest_res.nii.gz

# ---------------------------- Resampling Residuals --------------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Resampling residuals to MNI space."
flirt -ref ${reg_dir}/standard.nii.gz -in ${func_dir}/rest_res.nii.gz -out ${func_dir}/rest_res2standard.nii.gz -applyxfm -init ${reg_dir}/example_func2standard.mat -interp trilinear

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Nuisance regression completed successfully for Subject: $SUBJ_ID."
