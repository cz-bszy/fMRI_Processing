#!/bin/bash

set -euo pipefail

# =============================================================================
# Script: fMRI_preproc.sh
# Description:
#   Performs fMRI preprocessing steps for a specific subject.
#   Steps include:
#     1. Register functional to anatomical
#     2. Register anatomical to standard space
#     3. Apply registrations to functional data
# =============================================================================

# ---------------------------- Configuration ----------------------------------

NUM_THREADS=3
FUNC_DIR=""
ANAT_DIR=""
STANDARD_DIR=""
LOG_FILE=""

# ---------------------------- Usage Function --------------------------------

usage() {
    echo "Usage: $0 -s <subj_id> -n <num_threads> -f <func_dir> -a <anat_dir> -m <standard_dir> -l <log_file> [-h]"
    echo ""
    echo "Options:"
    echo "  -s    Subject ID (required)"
    echo "  -n    Number of threads (default: $NUM_THREADS)"
    echo "  -f    Functional directory (required)"
    echo "  -a    Anatomy directory (required)"
    echo "  -m    Standard directory (required)"
    echo "  -l    Log file path (required)"
    echo "  -h    Display this help message"
    exit 1
}

# ---------------------------- Argument Parsing ------------------------------

while getopts ":s:n:f:a:m:l:h" opt; do
    case ${opt} in
        s ) SUBJ_ID="$OPTARG" ;;
        n ) NUM_THREADS="$OPTARG" ;;
        f ) FUNC_DIR="$OPTARG" ;;
        a ) ANAT_DIR="$OPTARG" ;;
        m ) STANDARD_DIR="$OPTARG" ;;
        l ) LOG_FILE="$OPTARG" ;;
        h ) usage ;;
        \? ) echo "Invalid Option: -$OPTARG" >&2; usage ;;
        : ) echo "Option -$OPTARG requires an argument." >&2; usage ;;
    esac
done

# ---------------------------- Validation -------------------------------------

if [ -z "${SUBJ_ID:-}" ] || [ -z "${FUNC_DIR:-}" ] || [ -z "${ANAT_DIR:-}" ] || [ -z "${STANDARD_DIR:-}" ] || [ -z "${LOG_FILE:-}" ]; then
    echo "ERROR: Missing required arguments." >&2
    usage
fi

if ! [[ "$NUM_THREADS" =~ ^[1-9][0-9]*$ ]]; then
    echo "ERROR: Number of threads must be a positive integer." >&2
    exit 1
fi

# ---------------------------- Setup ------------------------------------------

export OMP_NUM_THREADS="$NUM_THREADS"

exec > >(tee -a "$LOG_FILE") 2>&1

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Preprocessing subject: $SUBJ_ID"

LOG_DIR="$FUNC_DIR/reg_dir/logs"
mkdir -p "$LOG_DIR"

for src in "$ANAT_DIR/Stru_Brain.nii.gz" "$STANDARD_DIR/MNI152_T1_3mm_brain.nii.gz" "$FUNC_DIR/example_func.nii.gz"; do
    if [ ! -f "$src" ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Source file '$src' does not exist."
        exit 1
    fi
done

# 复制文件
cp "$ANAT_DIR/Stru_Brain.nii.gz" "$FUNC_DIR/reg_dir/highres.nii.gz"
cp "$STANDARD_DIR/MNI152_T1_3mm_brain.nii.gz" "$FUNC_DIR/reg_dir/standard.nii.gz"
cp "$FUNC_DIR/example_func.nii.gz" "$FUNC_DIR/reg_dir/"

cd "$FUNC_DIR/reg_dir" || { echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Cannot change directory to '$FUNC_DIR/reg_dir'."; exit 1; }

# ---------------------------- Step 1: FUNC->T1 ------------------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Registering functional to anatomical for subject '$SUBJ_ID'."
flirt -ref highres.nii.gz -in example_func.nii.gz -out example_func2highres.nii.gz -omat example_func2highres.mat -cost corratio -dof 6 -interp trilinear
if [ $? -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Registration FUNC->T1 failed."
    exit 1
fi

# Create mat file for conversion from anatomical to functional
convert_xfm -inverse -omat highres2example_func.mat example_func2highres.mat
if [ $? -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Inverting transformation matrix example_func2highres.mat failed."
    exit 1
fi

# ---------------------------- Step 2: T1->STANDARD ---------------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Registering anatomical to standard for subject '$SUBJ_ID'."
flirt -ref standard.nii.gz -in highres.nii.gz -out highres2standard.nii.gz -omat highres2standard.mat -cost corratio -dof 12 -interp trilinear
if [ $? -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Registration T1->STANDARD failed."
    exit 1
fi

# Create mat file for conversion from standard to anatomical
convert_xfm -inverse -omat standard2highres.mat highres2standard.mat
if [ $? -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Inverting transformation matrix highres2standard.mat failed."
    exit 1
fi

# ---------------------------- Step 3: FUNC->STANDARD -------------------------

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Registering functional to standard for subject '$SUBJ_ID'."
convert_xfm -omat example_func2standard.mat -concat highres2standard.mat example_func2highres.mat
if [ $? -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Concatenating transformation matrices failed."
    exit 1
fi

flirt -ref standard.nii.gz -in example_func.nii.gz -out example_func2standard.nii.gz -applyxfm -init example_func2standard.mat -interp trilinear
if [ $? -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Applying registration to functional data failed."
    exit 1
fi

# Create inverse mat file for registration of standard to functional
convert_xfm -inverse -omat standard2example_func.mat example_func2standard.mat
if [ $? -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Inverting transformation matrix example_func2standard.mat failed."
    exit 1
fi

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Finished preprocessing for subject: $SUBJ_ID."
